{"version":3,"sources":["components/Navbar/Navbar.jsx","pages/Home/Home.jsx","pages/Portfolio/Portfolio.jsx","pages/Contact/Contact.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","src","process","alt","href","Home","Portfolio","Contact","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kWAwCeA,MArCf,WACI,OACI,yBAAKC,UAAU,cAEX,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,MAAMC,IAAKC,2DAAqEC,IAAI,aACnG,wBAAIH,UAAU,YACV,6DAIJ,uBAAGA,UAAU,YAAb,kBAIJ,yBAAKA,UAAU,YACX,uBAAGA,UAAU,cAAcI,KAAK,YAAhC,WAGA,yBAAKJ,UAAU,cAAf,KAGA,uBAAGA,UAAU,cAAcI,KAAK,YAAhC,aAGA,yBAAKJ,UAAU,cAAf,KAGA,uBAAGA,UAAU,cAAcI,KAAMF,6CAAjC,a,MCpBDG,MARf,WACI,OACI,2C,MCQOC,MAVf,WAEI,OACI,gD,MCKOC,MARf,WACI,OACI,8CCmCOC,MA/Bf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,EAAD,MACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWN,IACjC,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,QAAQC,UAAWN,IACrC,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,aAAaC,UAAWL,IAC1C,kBAAC,IAAD,CAAOG,OAAK,EAACC,KAAK,WAAWC,UAAWJ,MCJ5BK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.46bd929f.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <nav className=\"navbar row\">\r\n            {/* <div className=\"\"> */}\r\n            <div className=\"col-md-6 nav_brand\">\r\n                <img className=\"ajh\" src={process.env.PUBLIC_URL + \"/assets/images/logo/ajh_logo_192x192.png\"} alt=\"ajh_logo\" />\r\n                <h2 className=\"nav_name\">\r\n                    <strong>\r\n                        Alexander James Hamilton\r\n                    </strong>\r\n                </h2>\r\n                <p className=\"nav_desc\">\r\n                    Web Developer\r\n                </p>\r\n            </div>\r\n            <div className=\"col-md-6\">\r\n                <a className=\"nav_selects\" href=\"/contact\">\r\n                    Contact\r\n                </a>\r\n                <div className=\"nav_splits\">\r\n                    |\r\n                </div>\r\n                <a className=\"nav_selects\" href=\"/contact\">\r\n                    Portfolio\r\n                </a>\r\n                <div className=\"nav_splits\">\r\n                    |\r\n                </div>\r\n                <a className=\"nav_selects\" href={process.env.PUBLIC_URL + \"/assets/images/resume.pdf\"}>\r\n                    Resume\r\n                </a>\r\n            </div>\r\n            {/* </div> */}\r\n        </nav>\r\n    )\r\n};\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Home() {\r\n    return (\r\n        <div>\r\n            Test Home\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Portfolio() {\r\n\r\n    return (\r\n        <div>\r\n            Test Portfolio\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nexport default Portfolio;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Contact() {\r\n    return (\r\n        <div>\r\n            Test Contact\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Contact;","import React from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport './App.css';\nimport Navbar from './components/Navbar';\nimport Home from \"./pages/Home\";\nimport Portfolio from \"./pages/Portfolio/Portfolio\";\nimport Contact from \"./pages/Contact\";\n\n\nfunction App() {\n  return (\n    <Router>\n      <Navbar />\n        <Route exact path=\"/\" component={Home} />\n        <Route exact path=\"/home\" component={Home} />\n        <Route exact path=\"/portfolio\" component={Portfolio} />\n        <Route exact path=\"/contact\" component={Contact} />\n    </Router>\n\n\n\n    // <div className=\"App\">\n    //   <header className=\"App-header\">\n    //     <img src={logo} className=\"App-logo\" alt=\"logo\" />\n    //     <p>\n    //       Edit <code>src/App.js</code> and save to reload.\n    //     </p>\n    //     <a\n    //       className=\"App-link\"\n    //       href=\"https://reactjs.org\"\n    //       target=\"_blank\"\n    //       rel=\"noopener noreferrer\"\n    //     >\n    //       Learn React\n    //     </a>\n    //   </header>\n    // </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}